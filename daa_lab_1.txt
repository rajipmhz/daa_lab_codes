1.GCD:
#include<stdio.h>
int gcd(int a,int b)
{
 int r;
 if(a==0)
 return b;
 if(b==0)
 return a;
 else
 {
 while(b!=0)
 {
 r=a%b;
 a=b;
 b=r;
 }
 return a;
 }
}
int main()
{
 int a,b;
 printf("Enter the two numbers: ");
 scanf("%d %d",&a,&b);
 printf("GCD (%d,%d) : %d",a,b,gcd(a,b));
 return 0;
}

2.Fibonacci
#include<Stdio.h>
int fibonacci(int n)
{
 if (n <= 0)
 {
 return -1; 
 }
 else if (n == 1)
 {
 return 0;
 }
 else if (n == 2)
 {
 return 1;
 }
 int first = 0, second = 1, temp,i;
 for (i = 3; i <= n; i++)
 {
 temp = first + second;
 first = second;
 second = temp;
 }
 return temp;
}
int main()
{
 int n;
 printf("Enter the position of the Fibonacci number you want to find:");
 scanf("%d", &n);
 int result = fibonacci(n);
 if (result != -1)
 {
 printf("Fibonacci number at position %d is %d\n", n, result);
 }
 else
 {
 printf("Input should be a positive integer.\n");
 }
 return 0;
}

3.linearsearch
#include<stdio.h>
#define MAX 100
int linearSearch(int a[],int n,int key)
{
int i;
 for(i=0;i<n;i++)
 {
 if(a[i]==key)
 {
 return i;
 }
 }
 return -1;
}
int main()
{
 int i,n,key,location,a[MAX];
 printf("Enter then size of list: ");
 scanf("%d",&n);
 printf("\nEnter the content of list :");
 for(i=0;i<n;i++)
 {
 scanf("%d",&a[i]);
 }
 printf("\nEnter the element to find in array: ");
 scanf("%d",&key);
 location=linearSearch(a,n,key);
 if(location==-1)
 {
 printf("\n%d is not in the list",key);
 }
 else
 {
 printf("%d is in the index %d of the array",key,location);
 }
 return 0;
}

4. bubble sort
#include<stdio.h>
#define MAX 100
void bubbleSort(int a[],int n)
{
 int i,j,temp;
 for(i=0;i<n;++i)
 {
 for(j=0;j<(n-i-1);++j)
 {
 if(a[j]>a[j+1])
 {
 temp= a[j+1];
 a[j+1]=a[j];
 a[j]=temp;
 }
 }
 }
}
int main()
{
 int a[MAX],n,i;
 printf("Enter the number of Data item: ");
 scanf("%d",&n);
 printf("Enter the elements: ");
 for(i=0;i<n;++i)
 scanf("%d",&a[i]);
 bubbleSort(a,n);
 printf("\nData after sorting: ");
 for(i=0;i<n;++i)
 printf("%d ",a[i]);
 return 0;
}

5.selection sort
#include<stdio.h>
#define MAX 100
void selectionSort(int a[], int n)
{
 int i,j,temp,min;
 for(i=0;i<n;i++)
 {
 min=i;
 for(j=i+1;j<n;j++)
 {
 if(a[j]<a[min])
 min=j;
 }
 if(min!=i)
 {
 temp=a[i];
 a[i]=a[min];
 a[min]=temp;
 }
 }
}
int main() {
 int a[MAX],n,i;
 printf("Enter the number of Data item: ");
 scanf("%d",&n);
 printf("Enter the elements: ");
 for(i=0;i<n;++i)
 scanf("%d",&a[i]);
 selectionSort(a,n);
 printf("\nData after sorting: ");
 for(i=0;i<n;++i)
 printf("%d ",a[i]);
 return 0;
}

6.insertion sort
#include <stdio.h>
#define MAX 100
void insertionSort(int arr[],int n)
{
 int i,j,temp;
 for (i = 1 ; i<n; i++)
 {
 temp=arr[i];
 j=i-1;
 while ( j>=0 && arr[j] > temp)
 {
 arr[j+1]=arr[j];
 j--;
 }
 arr[j+1]=temp;
 }
}
int main()
{
 int a[MAX],n,i;
 printf("Enter the number of Data item: ");
 scanf("%d",&n);
 printf("Enter the elements: ");
 for(i=0;i<n;++i)
 scanf("%d",&a[i]);
 insertionSort(a,n);
 printf("\nData after sorting: ");
 for(i=0;i<n;++i)
 printf("%d ",a[i]);
 return 0;
}

7.binarysearch
#include<stdio.h>
#define MAX 100
int binarySearch(int a[],int l,int r,int key)
{
 int m;
 if(l<=r)
 {
 m=(l+r)/2;
 if(a[m]==key)
 {
 return m;
 }
 else if(key<a[m])
 return binarySearch(a,l,m-1,key);
 else
 return binarySearch(a,m+1,r,key);
 }
 return -1;
}
int main()
{
 int i,n,key,location,a[MAX];
 printf("Enter then size of list: ");
 scanf("%d",&n);
 printf("\nEnter the content of list : ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&a[i]);
 }
 printf("\nEnter the element to find in array: ");
 scanf("%d",&key);
 location=binarySearch(a,0,n-1,key);
 if(location==-1)
 {
 printf("\n%d is not in the list",key);
 }
 else
 {
 printf("%d is in the index %d of the array",key,location);
 }
 return 0;
}

8.minmax
#include <stdio.h>
#define MAX 100
void findMinMax(int a[], int n, int *min, int *max) {
 *min = a[0];
 *max = a[0];
int i;
 for (i = 1; i < n; i++) {
 if (a[i] < *min) {
 *min = a[i];
 }
 if (a[i] > *max) {
 *max = a[i];
 }
 }
}
int main() {
 int i,n,min,max,a[MAX];
 printf("Enter then size of list: ");
 scanf("%d",&n);
 printf("\nEnter the content of list : ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&a[i]);
 }
 findMinMax(a, n, &min, &max);
 printf("Minimum element: %d\n", min);
 printf("Maximum element: %d\n", max);
 return 0;
}

9.minmax
#include <stdio.h>
#define MAX 100
void findMinMax(int a[], int l, int r, int *min, int *max) {
 int min1, max1, min2, max2;
 if (l == r) {
 *min = a[l];
 *max = a[l];
 return;
 }
 if (r == l + 1) {
 if (a[l] < a[r]) {
 *min = a[l];
 *max = a[r];
 } else {
 *min = a[r];
 *max = a[l];
 }
 return;
 }
 int mid = (l + r) / 2;
 findMinMax(a, l, mid, &min1, &max1);
 findMinMax(a, mid + 1, r, &min2, &max2);
 *min = (min1 < min2) ? min1 : min2;
 *max = (max1 > max2) ? max1 : max2;
}
int main() {
 int i,n,min,max,a[MAX];
 printf("Enter then size of list: ");
 scanf("%d",&n);
 printf("\nEnter the content of list : ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&a[i]);
 }
 findMinMax(a, 0,n-1, &min, &max);
 printf("Minimum element: %d\n", min);
 printf("Maximum element: %d\n", max);
 return 0;
}

10. merge sort
#include <stdio.h>
#define MAX 100
void mergeSort(int a[], int l, int h) {
int m;
if(l<h)
{
 m=(l+h)/2;
 mergeSort(a,l,m);
 mergeSort(a,m+1,h);
 merge(a,l,m+1,h);
}
}
void merge(int a[],int l,int m,int h)
{
 int i,j,k,temp[MAX];
 i=l;
 j=m;
 k=l;
 while(i<m && j<=h)
 {
 if(a[i] < a[j])
 temp[k++]=a[i++];
 else
 temp[k++]=a[j++];
 }
 while(i<m)
 temp[k++]=a[i++];
 while(j<=h)
 temp[k++]=a[j++];
 for(i=l;i<=h;i++)
 a[i]=temp[i];
}
int main() {
 int a[MAX],n,i,j,temp;
 printf("Enter the number of Data item: ");
 scanf("%d",&n);
 printf("Enter the elements: ");
 for(i=0;i<n;++i)
 scanf("%d",&a[i]);
 mergeSort(a,0,n-1);
 printf("\nData after sorting: ");
 for(i=0;i<n;++i)
 printf("%d ",a[i]);
 return 0;
}

11.quick_sort
#include <stdio.h>
#define MAX 100
void quick_sort(int[],int,int);
void quick_sort(int a[ ],int l,int r)
{
int j;
if(l<r)
{ j=partition(a,l,r);
quick_sort(a,l,j-1);
quick_sort(a,j+1,r);
}
}
int partition(int a[],int l,int r)
{
int pivot,i,j,temp;
pivot=a[l];
i=l;
for(j=i+1;j<=r;j++)
{
 if(a[j]<=pivot)
 {
 i++;
 temp=a[j];
 a[j]=a[i];
 a[i]=temp;
 }
}
 temp=a[l];
 a[l]=a[i];
 a[i]=temp;
 return i;
}
int partition(int[],int,int);
int main() {
 int a[MAX],n,i,j,temp;
 printf("Enter the number of Data item: ");
 scanf("%d",&n);
 printf("Enter the elements: ");
 for(i=0;i<n;++i)
 scanf("%d",&a[i]);
 quick_sort(a,0,n-1);
 printf("\nData after sorting: ");
 for(i=0;i<n;++i)
 printf("%d ",a[i]);
 return 0;
}

12.heap sort
#include <stdio.h>
#define MAX 100
void heapSort(int A[], int n) {
 buildMaxHeap(A, n);
 int i;
for ( i = n - 1; i >= 1; i--) {
 swap(&A[0], &A[i]);
 maxHeapify(A, 0, i);
 }
}
void buildMaxHeap(int A[], int n) {
 int i;
for ( i = n / 2 - 1; i >= 0; i--) {
 maxHeapify(A, i, n);
 }
}
void maxHeapify(int A[], int i, int n) {
 int largest = i;
 int left = 2 * i + 1;
 int right = 2 * i + 2;
 if (left < n && A[left] > A[largest])
 largest = left;
 if (right < n && A[right] > A[largest])
 largest = right;
 if (largest != i) {
 swap(&A[i], &A[largest]);
 maxHeapify(A, largest, n);
 }
}
void swap(int *a, int *b) {
 int temp = *a;
 *a = *b;
 *b = temp;
}
int main() {
 int A[MAX],n,i,j,temp;
 printf("Enter the number of Data item: ");
 scanf("%d",&n);
 printf("Enter the elements: ");
 for(i=0;i<n;++i)
 scanf("%d",&A[i]);
 heapSort(A,n);
 printf("Sorted array:\n");
 for (i = 0; i < n; i++) {
 printf("%d ", A[i]);
 }
 printf("\n");
 return 0;
}

13. random_qs
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 100
void Randomised_QS(int a[], int l, int r) {
 int j;
 if (l < r) {
 j = Randomised_partition(a, l, r);
 Randomised_QS(a, l, j - 1);
 Randomised_QS(a, j + 1, r);
 }
}
int Randomised_partition(int a[], int l, int r) {
 int k, temp;
 srand(time(NULL));
 k = rand() % (r - l + 1) + l;
 temp = a[k];
 a[k] = a[l];
 a[l] = temp;
 return partition(a, l, r);
}
int partition(int a[], int l, int r) {
 int pivot, i, j, temp;
 pivot = a[l];
 i = l;
 for (j = i + 1; j <= r; j++) {
 if (a[j] <= pivot) {
 i++;
 temp = a[j];
 a[j] = a[i];
 a[i] = temp;
 }
 }
 temp = a[l];
 a[l] = a[i];
 a[i] = temp;
 return i;
}
int main() {
 int a[MAX], n, i;
 printf("Enter the number of Data items: ");
 scanf("%d", &n);
 printf("Enter the elements: ");
 for (i = 0; i < n; ++i)
 scanf("%d", &a[i]);
 Randomised_QS(a, 0, n - 1);
 printf("\nData after sorting: ");
 for (i = 0; i < n; ++i)
 printf("%d ", a[i]);
 
return 0;
}

14.select_nonlinear
#include<stdio.h>
#define MAX 100
int Select_NonLinear(int a[], int k, int n) {
 int i, j, temp, min;
 for(i = 0; i < k; i++) {
 min = i;
 for(j = i + 1; j < n; j++) {
 if(a[j] < a[min])
 min = j;
 }
 temp = a[i];
 a[i] = a[min];
 a[min] = temp;
 }
 return a[k - 1];
}
int main() {
 int a[MAX], n, i, k, kthSmallest;
 printf("Enter the number of Data item: ");
 scanf("%d", &n);
 printf("Enter the elements: ");
 for(i = 0; i < n; ++i)
 scanf("%d", &a[i]);
 printf("Enter the position to find: ");
 scanf("%d", &k);
 kthSmallest = Select_NonLinear(a, k, n);
 printf("%dth smallest: %d\n", k, kthSmallest);
 return 0;
}


15.randomised select
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 100
int Randomised_Select(int a[], int l, int r,int i) {
 int p,k;
 if(l==r)
 return a[l];
 p=Randomised_partition(a,l,r);
 k=p-l+1;
 if(i<=k)
 return Randomised_Select(a,l,p-1,i);
 else
 return Randomised_Select(a,p+1,r,i-k);
}
int Randomised_partition(int a[], int l, int r) {
 int k, temp;
 srand(time(NULL));
 k = rand() % (r - l + 1) + l;
 temp = a[k];
 a[k] = a[l];
 a[l] = temp;
 return partition(a, l, r);
}
int partition(int a[], int l, int r) {
 int pivot, i, j, temp;
 pivot = a[l];
 i = l;
 for (j = i + 1; j <= r; j++) {
 if (a[j] <= pivot) {
 i++;
 temp = a[j];
 a[j] = a[i];
 a[i] = temp;
 }
 }
 temp = a[l];
 a[l] = a[i];
 a[i] = temp;
 return i;
}
int main() {
 int a[MAX], n, i, k, kthSmallest;
 printf("Enter the number of Data item: ");
 scanf("%d", &n);
 printf("Enter the elements: ");
 for(i = 0; i < n; ++i)
 scanf("%d", &a[i]);
 printf("Enter the position to find: ");
 scanf("%d", &k);
 kthSmallest = Randomised_Select(a, 0, n-1,k);
 printf("%dth smallest: %d\n", k, kthSmallest);
 return 0;
}


16. fractionalknapsack
#include<stdio.h>
struct Item {
 int weight;
 int profit;
 float ratio; 
};
void Sort(struct Item items[], int n) {
 int i,j;
for (i = 0; i < n - 1; i++) {
 for ( j = 0; j < n - i - 1; j++) {
 if (items[j].ratio < items[j + 1].ratio) {
 struct Item temp = items[j];
 items[j] = items[j + 1];
 items[j + 1] = temp;
 }
 }
 }
}
float fractionalKnapsack(struct Item items[], int n, int capacity) {
 int i;
 Sort(items, n);
 int remainingCapacity = capacity;
 float totalProfit = 0.0;
 for (i = 0; i < n; i++) {
 if (items[i].weight <= remainingCapacity && remainingCapacity > 0) {
 totalProfit += items[i].profit;
 remainingCapacity -= items[i].weight;
 } else {
 break;
 }
 }
 if (remainingCapacity > 0 && i < n) {
 totalProfit += items[i].profit * ((float)remainingCapacity / items[i].weight);
 }
 return totalProfit;
}
int main() {
 int n, capacity;
 printf("Enter the number of items: ");
 scanf("%d", &n);
 printf("Enter the capacity of knapsack: ");
 scanf("%d", &capacity);
 struct Item items[n];
 printf("Enter the weight and profit of each item:\n");
 
int i;
for (i = 0; i < n; i++) {
 scanf("%d %d", &items[i].weight, &items[i].profit);
 items[i].ratio = (float)items[i].profit / items[i].weight;
 }
 float maxProfit = fractionalKnapsack(items, n, capacity);
 printf("Maximum profit: %.2f\n", maxProfit);
 return 0;
}

17.jobsequencing
#include<stdio.h>
struct Job {
 int d;
 int p;
};
float jobSequencing(struct Job jobs[], int n) {
 int profit=0,count=0,dmax=0,i,slot[n],r;
 for(i=1;i<=n;i++)
 {
 if(jobs[i].d>dmax)
 {
 dmax=jobs[i].d;
 }
 }
 for(i=1;i<=dmax;i++)
 {
 slot[i]=-1;
 }
 for(i=1;i<=n;i++)
 {
 r=jobs[i].d;
 for(r=jobs[i].d;r>=1;r--)
 {
 if(slot[r]==-1)
 {
 slot[r]=i;
 profit+=jobs[i].p;
 count++;
 break;
 }
 }
 if(count==dmax)
 {
 break;
 }
 }
 return profit;
}
int main() {
 int n;
 printf("Enter the number of jobs: ");
 scanf("%d", &n);
 struct Job jobs[n];
 printf("Enter the deadline and profit of each item:\n");
 int i;
for ( i = 1; i <= n; i++) {
 scanf("%d %d", &jobs[i].d, &jobs[i].p);
 }
 float maxProfit = jobSequencing(jobs, n);
 printf("Maximum profit: %.2f\n", maxProfit);
 return 0;
}

18.kruskal
#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 9
#define INF 999
int parent[MAX_VERTICES];
int find(int);
int uni(int, int);
int main() {
 int i, j, k, a, b, u, v, n, ne = 1;
 int min, mincost = 0, cost[MAX_VERTICES][MAX_VERTICES];
 printf("Enter the no. of vertices (max 9): ");
 scanf("%d", &n);
 if (n <= 0 || n > MAX_VERTICES) {
 printf("Invalid number of vertices. Please enter a number between 1 and 9.\n");
 return 1;
 }
 printf("\nEnter the cost adjacency matrix:\n");
 for (i = 1; i <= n; i++) {
 for (j = 1; j <= n; j++) {
 scanf("%d", &cost[i][j]);
 if (cost[i][j] == 0 && i != j)
 cost[i][j] = INF;
 }
 }
 for (i = 1; i <= n; i++) {
 parent[i] = 0; 
 }
 printf("The edges of Minimum Cost Spanning Tree are\n");
 while (ne < n) {
 for (i = 1, min = INF; i <= n; i++) {
 for (j = 1; j <= n; j++) {
 if (cost[i][j] < min) {
 min = cost[i][j];
 a = u = i;
 b = v = j;
 }
 }
 }
 u = find(u);
 v = find(v);
 if (uni(u, v)) {
 printf("%d edge (%d,%d) = %d\n", ne++, a, b, min);
 mincost += min;
 }
 cost[a][b] = cost[b][a] = INF;
 }
 printf("\n\tMinimum cost = %d\n", mincost);
 return 0;
}
int find(int i) {
 while (parent[i])
 i = parent[i];
 return i;
}
int uni(int i, int j) {
 if (i != j) {
 parent[j] = i;
 return 1;
 }
 return 0;
}

19. prims
#include<stdio.h>
#include<stdlib.h>
#define infinity 9999
#define MAX 20
int G[MAX][MAX],spanning[MAX][MAX],n;
int prims();
int main()
{
int i,j,total_cost;
printf("Enter no. of vertices:");
scanf("%d",&n);
printf("\nEnter the adjacency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
total_cost=prims();
printf("\nspanning tree matrix:\n");
for(i=0;i<n;i++)
{
printf("\n");
for(j=0;j<n;j++)
printf("%d\t",spanning[i][j]);
}
printf("\n\nTotal cost of spanning tree=%d",total_cost);
return 0;
}
int prims()
{
int cost[MAX][MAX];
int u,v,min_distance,distance[MAX],from[MAX];
int visited[MAX],no_of_edges,i,min_cost,j;
//create cost[][] matrix,spanning[][]
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
if(G[i][j]==0)
cost[i][j]=infinity;
else
cost[i][j]=G[i][j];
spanning[i][j]=0;
}
//initialise visited[],distance[] and from[]
distance[0]=0;
visited[0]=1;
for(i=1;i<n;i++)
{
distance[i]=cost[0][i];
from[i]=0;
visited[i]=0;
}
min_cost=0;
no_of_edges=n-1;
while(no_of_edges>0)
{
min_distance=infinity;
for(i=1;i<n;i++)
if(visited[i]==0&&distance[i]<min_distance)
{
v=i;
min_distance=distance[i];
}
u=from[v];
//insert the edge in spanning tree
spanning[u][v]=distance[v];
spanning[v][u]=distance[v];
no_of_edges--;
visited[v]=1;
for(i=1;i<n;i++)
if(visited[i]==0&&cost[i][v]<distance[i])
{
distance[i]=cost[i][v];
from[i]=v;
}
min_cost=min_cost+cost[u][v];
}
return(min_cost);
}

20.dijkstra
#include<stdio.h>
#define INFINITY 999
void dijkstra(int n, int v, int cost[10][10], int dist[100]) {
 int i, u, count, w, flag[10], min;
 for (i = 1; i <= n; i++) {
 flag[i] = 0;
 dist[i] = cost[v][i];
 }
 count = 2;
 while (count <= n) {
 min = INFINITY;
 for (w = 1; w <= n; w++) {
 if (dist[w] < min && !flag[w]) {
 min = dist[w];
 u = w;
 }
 }
 flag[u] = 1;
 count++;
 for (w = 1; w <= n; w++) {
 if ((dist[u] + cost[u][w] < dist[w]) && !flag[w]) {
 dist[w] = dist[u] + cost[u][w];
 }
 }
 }
}
int main() {
 int n, v, i, j, cost[10][10], dist[100];
 printf("\nEnter the number of nodes: ");
 scanf("%d", &n);
 printf("\nEnter the cost matrix:\n");
 for (i = 1; i <= n; i++) {
 for (j = 1; j <= n; j++) {
 scanf("%d", &cost[i][j]);
 if (cost[i][j] == 0) {
 cost[i][j] = INFINITY;
 }
 }
 }
 printf("\nEnter the source node: ");
 scanf("%d", &v);
 dijkstra(n, v, cost, dist);
 printf("\nShortest paths:\n");
 for (i = 1; i <= n; i++) {
 if (i != v) {
 printf("%d to %d: Distance = %d\n", v, i, dist[i]);
 }
 }
 return 0;
}

21. huffman

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_TREE_NODES 100
struct TreeNode {
 char data;
 unsigned freq;
 struct TreeNode *left, *right;
};
struct MinHeapNode {
 struct TreeNode *treeNode;
 struct MinHeapNode *next;
};
struct MinHeap {
 struct MinHeapNode *head;
 int size;
};
struct TreeNode* createTreeNode(char data, unsigned freq) {
 struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
 node->left = node->right = NULL;
 node->data = data;
 node->freq = freq;
 return node;
}
struct MinHeapNode* createMinHeapNode(struct TreeNode* treeNode) {
 struct MinHeapNode* node = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));
 node->treeNode = treeNode;
 node->next = NULL;
 return node;
}
struct MinHeap* createMinHeap() {
 struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));
 minHeap->head = NULL;
 minHeap->size = 0;
 return minHeap;
}
void insertMinHeapNode(struct MinHeap* minHeap, struct MinHeapNode* node) {
 if (!minHeap->head || minHeap->head->treeNode->freq > node->treeNode->freq) {
 node->next = minHeap->head;
 minHeap->head = node;
 } else {
 struct MinHeapNode* current = minHeap->head;
 while (current->next && current->next->treeNode->freq <= node->treeNode->freq) {
 current = current->next;
 }
 node->next = current->next;
 current->next = node;
 }
 minHeap->size++;
}
struct TreeNode* extractMin(struct MinHeap* minHeap) {
 if (!minHeap->head) return NULL;
 struct MinHeapNode* temp = minHeap->head;
 minHeap->head = minHeap->head->next;
 struct TreeNode* treeNode = temp->treeNode;
 free(temp);
 minHeap->size--;
 return treeNode;
}
struct TreeNode* buildHuffmanTree(char data[], int freq[], int size) {
 struct TreeNode *left, *right, *top;
 struct MinHeap* minHeap = createMinHeap();
 for (int i = 0; i < size; ++i) {
 insertMinHeapNode(minHeap, createMinHeapNode(createTreeNode(data[i], freq[i])));
 }
 while (minHeap->size != 1) {
 left = extractMin(minHeap);
 right = extractMin(minHeap);
 top = createTreeNode('$', left->freq + right->freq);
 top->left = left;
 top->right = right;
 insertMinHeapNode(minHeap, createMinHeapNode(top));
 }
 return extractMin(minHeap);
}
void printCodes(struct TreeNode* root, int arr[], int top) {
 if (root->left) {
 arr[top] = 0;
 printCodes(root->left, arr, top + 1);
 }
 if (root->right) {
 arr[top] = 1;
 printCodes(root->right, arr, top + 1);
 }
 if (!(root->left) && !(root->right)) {
 printf("%c: ", root->data);
 for (int i = 0; i < top; ++i)
 printf("%d", arr[i]);
 printf("\n");
 }
}
void huffmanCoding(char data[], int freq[], int size) {
 struct TreeNode* root = buildHuffmanTree(data, freq, size);
 int arr[MAX_TREE_NODES], top = 0;
 printCodes(root, arr, top);
}
int main() {
 char data[MAX_TREE_NODES];
 int freq[MAX_TREE_NODES];
 int n;
 printf("Enter the number of characters: ");
 scanf("%d", &n);
 printf("Enter the characters and their frequencies:\n");
 for (int i = 0; i < n; ++i)
 scanf(" %c %d", &data[i], &freq[i]);
 huffmanCoding(data, freq, n);
 return 0;
}








